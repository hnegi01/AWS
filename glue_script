import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from awsglue.context import GlueContext
from awsglue.job import Job
from awsglue.dynamicframe import DynamicFrame

# @params: [TempDir, JOB_NAME]
args = getResolvedOptions(sys.argv, ['TempDir','JOB_NAME'])

sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

datasource0 = glueContext.create_dynamic_frame.from_catalog(database = "Glue_DB_Name", table_name = "Glue_Table_Name", transformation_ctx = "datasource0")


# Covert DynamicFrame into Spark DataFrame
sdf = datasource0.toDF()

'''
You can filter or transform the data using Spark Functions
'''

# Covert DataFrame back to DynamicFrame
ddf = DynamicFrame.fromDF(sdf,glueContext,"doc_dtl_final_ddf")

applymapping1 = ApplyMapping.apply(frame = ddf, mappings = [("DynamicFrameField1", "DynamicFrameDataType1", "RedshiftField1", "RedshiftDataType1"), ("DynamicFrameField2", "DynamicFrameDataType2", "RedshiftField2", "RedshiftDataType2"), ("DynamicFrameField3", "DynamicFrameDataType3", "RedshiftField3", "RedshiftDataType3"), ("DynamicFrameField4", "DynamicFrameDataType4", "RedshiftField4", "RedshiftDataType4")], transformation_ctx = "applymapping1")

datasink4 = glueContext.write_dynamic_frame.from_jdbc_conf(frame = applymapping1, catalog_connection = "connection_name", connection_options = {"dbtable": "dbo.tabel_name", "database": "db_name"}, redshift_tmp_dir = args["TempDir"], transformation_ctx = "datasink4")
job.commit()
